Fermat:=proc(N)
local x, y, z, val, f, S;
#f:=(x,y)->x^3 + y^3 - 1;
S:={};
for x from 2 to N do
	for y from 2 to x do
		#val:= f(x,y)^(1/3);
		val:=evalf((x^3 + y^3 - 1)^(1/3));
		if val = floor(val) then
			S:= S union {[x, y, floor(val)]}
		fi:
	od:
od:
return(S);
end:

# -------------------------------

PrimeAP:=proc(p,k)
local d, i, isPrime;
d:=0;
isPrime:=false;

while(not isPrime) do
	d:= d + 1;
	isPrime:=true;
	for i from 1 to k-1 do
		isPrime:= isPrime and isprime(p + d*i);
	od:
od:
return({seq(p + d*i, i=0..k-1)})
end:

# -------------------------------

SwitchMonty := proc(p)
local roll, car1, car2, open, switch, doors;

doors:={1,2,3,4,5};
roll:=rand(1..nops(doors));
car1:=roll();

doors:={1,2,3,4,5} minus {car1};
roll:=rand(1..nops(doors));
car2:=roll();

open:={1,2,3,4,5} minus {car1, car2, p};
roll:=rand(1..nops(open));
open:=open[roll()];

switch:={1,2,3,4,5} minus {p,open};
switch:=switch[1];

return(evalb(switch=car1 or switch=car2));
end: